load("@rules_go//extras:gomock.bzl", "gomock")
load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "core",
    srcs = [
        "binary_marshaler.go",
        "created_object.go",
        "decodable.go",
        "get_index_from_reference_message.go",
        "leak_checking_object_manager.go",
        "message.go",
        "noop_reference_metadata.go",
        "object_capturer.go",
        "patched_message.go",
        "patched_message_list.go",
        "reference_message_patcher.go",
        "top_level_message.go",
        "walkable_reference_metadata.go",
    ],
    importpath = "bonanza.build/pkg/model/core",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/ds",
        "//pkg/encoding/varint",
        "//pkg/model/encoding",
        "//pkg/proto/model/core",
        "//pkg/storage/dag",
        "//pkg/storage/object",
        "@com_github_buildbarn_bb_storage//pkg/util",
        "@org_golang_google_grpc//codes",
        "@org_golang_google_grpc//status",
        "@org_golang_google_protobuf//proto",
        "@org_golang_google_protobuf//reflect/protoreflect",
        "@org_golang_google_protobuf//types/known/anypb",
    ],
)

go_test(
    name = "core_test",
    srcs = [
        "mocks_core_test.go",
        "patched_message_test.go",
        "reference_message_patcher_test.go",
    ],
    embed = [":core"],
    deps = [
        "//pkg/proto/model/core",
        "//pkg/proto/model/filesystem",
        "//pkg/storage/object",
        "@com_github_buildbarn_bb_storage//pkg/testutil",
        "@com_github_stretchr_testify//require",
        "@org_uber_go_mock//gomock",
    ],
)

gomock(
    name = "mocks_core",
    out = "mocks_core_test.go",
    interfaces = [
        "ReferenceMetadata",
        "ReferenceMetadataCreatorForTesting",
    ],
    library = "//pkg/model/core",
    mockgen_model_library = "@org_uber_go_mock//mockgen/model",
    mockgen_tool = "@org_uber_go_mock//mockgen",
    package = "core_test",
)
