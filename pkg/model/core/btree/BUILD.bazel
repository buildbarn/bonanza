load("@rules_go//extras:gomock.bzl", "gomock")
load("@rules_go//go:def.bzl", "go_library", "go_test")

go_library(
    name = "btree",
    srcs = [
        "all_leaves.go",
        "builder.go",
        "capturing.go",
        "chunker_factory.go",
        "find.go",
        "height_aware_builder.go",
        "node_merger.go",
        "object_creating_node_merger.go",
        "prolly_chunker_factory.go",
    ],
    importpath = "bonanza.build/pkg/model/core/btree",
    visibility = ["//visibility:public"],
    deps = [
        "//pkg/encoding/varint",
        "//pkg/model/core",
        "//pkg/model/encoding",
        "//pkg/model/parser",
        "//pkg/proto/model/core",
        "//pkg/proto/model/filesystem",
        "//pkg/storage/object",
        "@com_github_buildbarn_bb_storage//pkg/util",
        "@org_golang_google_protobuf//proto",
    ],
)

go_test(
    name = "btree_test",
    srcs = [
        "height_aware_builder_test.go",
        "mocks_btree_test.go",
        "mocks_core_test.go",
        "mocks_encoding_test.go",
        "prolly_chunker_factory_test.go",
    ],
    embed = [":btree"],
    deps = [
        "//pkg/model/core",
        "//pkg/proto/model/core",
        "//pkg/proto/model/filesystem",
        "//pkg/storage/object",
        "@com_github_stretchr_testify//require",
        "@org_uber_go_mock//gomock",
    ],
)

gomock(
    name = "mocks_btree",
    out = "mocks_btree_test.go",
    interfaces = [
        "ChunkerFactoryForTesting",
        "ChunkerForTesting",
        "NodeMergerForTesting",
        "ParentNodeComputerForTesting",
    ],
    library = "//pkg/model/core/btree",
    mockgen_model_library = "@org_uber_go_mock//mockgen/model",
    mockgen_tool = "@org_uber_go_mock//mockgen",
    package = "btree_test",
)

gomock(
    name = "mocks_core",
    out = "mocks_core_test.go",
    interfaces = ["ReferenceMetadata"],
    library = "//pkg/model/core",
    mockgen_model_library = "@org_uber_go_mock//mockgen/model",
    mockgen_tool = "@org_uber_go_mock//mockgen",
    package = "btree_test",
)

gomock(
    name = "mocks_encoding",
    out = "mocks_encoding_test.go",
    interfaces = ["BinaryEncoder"],
    library = "//pkg/model/encoding",
    mockgen_model_library = "@org_uber_go_mock//mockgen/model",
    mockgen_tool = "@org_uber_go_mock//mockgen",
    package = "btree_test",
)
