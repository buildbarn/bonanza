syntax = "proto3";

package bonanza.model.command;

import "bonanza.build/pkg/proto/model/core/core.proto";
import "bonanza.build/pkg/proto/model/filesystem/filesystem.proto";
import "google/protobuf/any.proto";
import "google/rpc/status.proto";

option go_package = "bonanza.build/pkg/proto/model/command";

message Command {
  // The arguments of the command.
  repeated ArgumentList.Element arguments = 1;

  // The environment variables to set when running the program.
  repeated EnvironmentVariableList.Element environment_variables = 2;

  // Parameters that the client used to create objects containing
  // Directory and Leaves messages. The worker MUST also use these
  // parameters when creating output directories.
  //
  // TODO: This field is relatively stable. Should we move it into a
  // nested message, so that Command remains small?
  bonanza.model.filesystem.DirectoryCreationParameters
      directory_creation_parameters = 3;

  // Parameters that the client used to create objects containing lists
  // of FileContents messages and file chunks. The worker MUST also use
  // these parameters when creating output files.
  bonanza.model.filesystem.FileCreationParameters file_creation_parameters = 4;

  // If set, capture the contents of directories, regular files, and
  // symbolic links present on the file system matching the provided
  // pattern after the command finishes executing. Directories that are
  // matched by the pattern are captured recursively. The contents of
  // these files are made available through
  // Result.output_root_reference.
  PathPattern output_path_pattern = 5;

  // The directory in which the command should be executed, relative to
  // the input root. The directory MUST exist within the input root.
  string working_directory = 6;

  // If non-empty, the command to be run requires that the input root
  // path is stable between actions, identified by a given UUID.
  //
  // In the case of Bazel, this may be because the command belongs to a
  // module extension or repository rule. Such commands are,
  // unfortunately, allowed to assume that the main source tree and any
  // repositories are situated at stable locations.
  string stable_input_root_path_uuid = 7;
}

message PathPattern {
  message Child {
    // The name of the directory, regular file, or symbolic link to
    // search for in the current directory. If a file of a different
    // type is located (e.g., a domain socket or FIFO), it is ignored.
    string name = 1;

    // Whether to match the current file or one of its children. This
    // field MUST be set.
    PathPattern pattern = 2;
  }

  message Children {
    // The children that should be selectively matched. These MUST be
    // sorted by name.
    repeated Child children = 1;
  }

  // If the current path is not a directory, it is matched.
  //
  // If the current path is a directory and this field is not set, the
  // directory and all of its children are matched.
  //
  // If the current path is a directory and this field is set, the
  // directory itself is matched. The matching process will traverse
  // into the directory and attempt to selectively match any of the
  // children specified.
  oneof children {
    // Set if there are too many children to store in the current
    // object.
    bonanza.model.core.DecodableReference children_external = 1
        [(bonanza.model.core.object_format) = {
          proto_type_name:
            "bonanza.model.command.PathPattern.Children";
        }];

    // Set if there are only few children to match.
    Children children_inline = 2;
  }
}

message ArgumentList {
  message Element {
    oneof level {
      string leaf = 1;
      bonanza.model.core.DecodableReference parent = 2
          [(bonanza.model.core.object_format) = {
            proto_list_type_name:
              "bonanza.model.command.ArgumentList.Element";
          }];
    }
  }

  repeated Element elements = 1;
}

message EnvironmentVariableList {
  message Element {
    message Leaf {
      string name = 1;
      string value = 2;
    }

    oneof level {
      Leaf leaf = 1;
      bonanza.model.core.DecodableReference parent = 2
          [(bonanza.model.core.object_format) = {
            proto_list_type_name:
              "bonanza.model.command.EnvironmentVariableList.Element";
          }];
    }
  }

  repeated Element elements = 1;
}

message Outputs {
  // The data written by the command that was written to standard
  // output, if any.
  bonanza.model.filesystem.FileContents stdout = 1;

  // The data written by the command that was written to standard
  // error, if any.
  bonanza.model.filesystem.FileContents stderr = 2;

  // If Command.output_path_pattern is set, the contents of the files
  // and directories matched by the provided pattern after execution of
  // the command completed.
  bonanza.model.filesystem.DirectoryContents output_root = 3;
}

message Action {
  // Reference of the Command message, which is a specification of the
  // process to launch and files to capture.
  bonanza.model.core.DecodableReference command_reference = 1
      [(bonanza.model.core.object_format) = {
        proto_type_name:
          "bonanza.model.command.Command";
      }];

  // Files that are used by the process to launch, and should be
  // instantiated on the file system prior to execution.
  bonanza.model.filesystem.DirectoryReference input_root_reference = 2;
}

message Result {
  google.rpc.Status status = 1;

  // The exit code of the process that was launched.
  int64 exit_code = 2;

  // Reference to an Outputs message that describes the contents of any
  // output files that were generated. The Outputs message is encoded
  // the same way as directories.
  bonanza.model.core.DecodableReference outputs_reference = 3
      [(bonanza.model.core.object_format) = {
        proto_type_name:
          "bonanza.model.command.Outputs";
      }];

  // Details that are specific to the kind of worker used. For example,
  // on POSIX-like systems this could contain a message with
  // getrusage(2) statistics.
  repeated google.protobuf.Any auxiliary_metadata = 4;

  // Set of key-value properties that uniquely identify (a thread of)
  // the worker that ran the action.
  //
  // TODO: Should this be a list, so that it's easy to encode
  // deterministically?
  map<string, string> worker_id = 5;
}
